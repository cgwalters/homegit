#!/usr/bin/env python

import os
import sys
import subprocess
import tempfile
import shutil
import argparse

GOLDDIR = os.environ.get('WCCVM_GOLDDIR', '/srv/libvirt/gold')
LIBVIRT_IMAGE_DIR = os.environ.get('WCCM_LIBVIRT_IMAGE_DIR', '/srv/libvirt/images')

parser = argparse.ArgumentParser(description='Manage cloud VMs using virt-manager')
subparser = parser.add_subparsers(help="commands", dest='action')
createp = subparser.add_parser("create", help="Create a VM")
createp.add_argument('--user-data', action='store', help='Path to user-data script', required=True)
createp.add_argument('--name', action='store', help='VM name', required=True)
createp.add_argument('--memory', action='store', help='RAM (GiB)', default=4, type=int)
createp.add_argument('--disk-size', action='store', help='Disk (GB) (Note: thin provisioned)', default=20, type=int)
createp.add_argument('--vcpus', action='store', help='CPU count', default=1, type=int)
createp.add_argument('--image', action='store', help='Base image name', required=True)
createp.add_argument('--network', action='store', help='Network name', default=None)

args = parser.parse_args()

def run_sync(argv, **kwargs):
    print "%s" % (subprocess.list2cmdline(argv), )
    subprocess.check_call(argv, **kwargs)

if args.action == 'create':
    imgname = args.name + '.qcow2'
    img_srcname = args.image
    if not img_srcname.endswith('.qcow2'):
        img_srcname += '.qcow2'
    metadata_iso_name = args.name + '-metadata.iso'

    metadata_path = LIBVIRT_IMAGE_DIR + '/' + metadata_iso_name

    tmpd = tempfile.mkdtemp()
    tmpd_md = tmpd + '/meta-data'
    with open(tmpd_md, 'w') as f:
        f.write('instance-id: {0}\nlocal-hostname: {0}\n'.format(args.name))
    shutil.copy(args.user_data, tmpd + '/user-data')
    run_sync(['genisoimage', '-output', metadata_path, '-volid', 'cidata', '-joliet', '-rock', 'user-data', 'meta-data'], cwd=tmpd)
    os.chmod(metadata_path, 0444)
    shutil.rmtree(tmpd)

    img_path = os.path.join(LIBVIRT_IMAGE_DIR, imgname)
    run_sync(['qemu-img', 'create', '-f', 'qcow2', '-o', 'backing_file={0}/{1}'.format(GOLDDIR, img_srcname),
              img_path, '{0}G'.format(args.disk_size)])
    os.chmod(img_path, 0660)

    vi_argv = ['virt-install', '--import', '--os-variant=rhel7.0',
               '--ram={0}'.format(args.memory*1024), '--vcpus={0}'.format(args.vcpus),
               '--disk', 'path={0},format=qcow2,bus=virtio'.format(img_path),
               '--disk', 'path={0},device=cdrom,readonly=on'.format(metadata_path),
               '--name', args.name,
               '--noautoconsole']
    if args.network is not None:
        vi_argv.extend(['--network', args.network])
    run_sync(vi_argv)
else:
    assert False
