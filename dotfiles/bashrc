# -*- mode: sh -*-

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions

alias l='longrun'
alias g-d='git diff'
alias g-am='git commit -a --amend --no-edit'
alias g-amr='git commit -a --amend'
alias g-c='git commit -a'
alias jhm='jhbuild make'
alias make='chrt --idle 0 make -j $(getconf _NPROCESSORS_ONLN)'
alias mock='chrt --idle 0 mock'
alias fedpkg='chrt --idle 0 fedpkg'
alias rhpkg='chrt --idle 0 rhpkg'

alias vagrant='env -u SSH_AUTH_SOCK vagrant'
alias vssh='vagrant up && vagrant ssh'
alias vrssh='vagrant up && vagrant ssh -c "sudo su -"'

export PATH="$HOME/.local/bin:$PATH"
if test -z "${SSH_AUTH_SOCK:-}"; then
   export SSH_AUTH_SOCK=${XDG_RUNTIME_DIR}/keyring/ssh
fi

HISTCONTROL=ignoreboth
export HISTSIZE=5000
shopt -s histappend

LAST_HISTORY_WRITE=$SECONDS
function save_history_prompt_command {
    if [ $(($SECONDS - $LAST_HISTORY_WRITE)) -gt 60 ]; then
        history -a && history -c && history -r
        LAST_HISTORY_WRITE=$SECONDS
    fi
}

if test -n "${PROMPT_COMMAND}"; then
  PROMPT_COMMAND="$PROMPT_COMMAND; save_history_prompt_command"
else
  PROMPT_COMMAND="save_history_prompt_command"
fi

if test -x /usr/bin/vim; then
    EDITOR=vim
else
    EDITOR=vi
fi
export EDITOR

_format_last_err ()
{
  local r=$?
  if ! [ $r -eq 0 ]; then
    echo -e -n '\e[1;31m[exit '$r']\e[0m '
  fi
}

_format_wd ()
{
  pwd=$(pwd)
  base=$(basename "$pwd")
  parent=$(basename $(dirname "$pwd"))
  pparent=$(basename $(dirname "$parent"))
  if test "$pparent" != "/"; then
    echo -n "$parent/";
    echo -n "$base";
  else 
    if test "$parent" != "/"; then
      echo -n "/$parent/"
      echo -n "$base";
    else
      echo -n "/";
      echo -n "$base";
    fi
  fi
}

_format_inroot_dir ()
{
  if test -n "$INROOT_DIR"; then
    echo " [root=$INROOT_DIR]"
  else
    if test -n "$CERTIFIED_GNOMIE"; then
      if test -z "$JHBUILD_PREFIX"; then
        JHBUILD_PREFIX=$MONO_GAC_PREFIX
      fi
      echo -n " [jhbuild=${JHBUILD_PREFIX}]"
    fi
  fi

  if test -n "$X_SCLS"; then
    echo -n " [scls:${X_SCLS%% }]"
  fi

  if test -n "$OS_PROJECT_NAME"; then
    echo -n " [osproj:${OS_PROJECT_NAME}]"
  fi
}

_format_screen ()
{
  if test -n "$WINDOW"; then
    echo -n " [scr:$WINDOW]";
  fi
}

_format_uid ()
{
  if test $(id -u) = '0'; then
    echo -n " <"; echo -n "uid=0"; echo -n ">"; 
  fi
}

PS1_PREFIX='$(_format_last_err)$(_format_wd)$(_format_screen)$(_format_uid)$(_format_inroot_dir)'

if test -f /usr/share/git-core/contrib/completion/git-prompt.sh; then
  source /usr/share/git-core/contrib/completion/git-prompt.sh
  have_git_ps1=true
else if test -n "$BASH_COMPLETION" && test -f /etc/bash_completion.d/git; then
  have_git_ps1=true
fi
fi

if $have_git_ps1; then
  PS1_PREFIX="$PS1_PREFIX"'$(__git_ps1 " [git %s]")'
fi

if test -z "${SIMPLE_PS1:-}"; then
   PS1="$PS1_PREFIX"'\n\$ '
   export PS1

   pd=$(which powerline-daemon 2>/dev/null)
   if [ -n "${pd:-}" ]; then
     # Use unique ID if we're in a container, because with --net=host we
     # may end up sharing an abstract socket
     POWERLINE_SOCKET=${XDG_RUNTIME_DIR}/powerline.${container_uuid:-}
     powerline-daemon -q --socket ${POWERLINE_SOCKET}
     POWERLINE_COMMAND_ARGS="--socket ${POWERLINE_SOCKET}"
     POWERLINE_BASH_CONTINUATION=1
     POWERLINE_BASH_SELECT=1
     . /usr/share/powerline/bash/powerline.sh
   fi
else
  PS1='$ '
fi

